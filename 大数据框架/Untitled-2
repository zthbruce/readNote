问题： 实现泊位的录入

1. 码头的更新

2. 泊位的更新
涉及的表：terminal_detail

输入参数：
berthList(只要传入已选择的泊位即可)

// 异常处理
如果为空，那么将该码头进行删除
删除Terminal和TerminalKey
// 然后

如果不为空
(1) 将该码头的泊位标记为未确认
(2) 将该码头下的泊位清空
(3) 将已选择的replace into
(4) 将已选择的泊位标记为未确认




// 前序中序遍历的非递归写法，好写
// 
import java.util.*;

public ArrayList<Integer> preOrder(TreeNode root){
    // as
    ArrayList<Integer> result = new ArrayList<Integer>();
    Stack<TreeNode> nodeList = new Stack<Integer>();
    // 遍历二叉树
    // 因为存在后入先出的情况，所以使用栈
    while(root!=null){
        while(root != null){
            result.add(root.val); // 将该节点加入，到时候弹出，取其右节点
            nodeList.push(root); // 
            root = root.left;
        }
        // 如果不为空，弹出节点，取其右节点
        // 怎么将其返回呢
        if(!nodeList.isEmpty())
            ListNode lastLeft = nodeList.pop();
            if(lastLeft.right!=null){
                root = lastLeft.right; // 取其右节点
            }
            else{
                root = nodeList.pop();
            }
            
        }
    }
    return result;
}
// 后序遍历的非递归写法
// 关键在于定义顺序，只有第二次弹出该节点，才访问该节点


// 大根堆的写法
// 堆化
public void maxHeapify(int[] arr, int start, int end){
    // as 
    if(arr == null || start >= end){
        return;
    }
    // 取三者中间的最大
    int li =  1 + (start << 1); // 左子树
    int right = 1 + li;
    int cmax = li;
    if(right <= end && arr[cmax] < arr[right]){
        cmax = right;
    }
    // 将cmax与start作交换
    if(cmax > start){
        swap(arr, i, j);
        maxHeapify(arr, cmax, end); // 将子节点堆化
    }
}


public void swap(int[] arr, int i ,int j){
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
}


// 堆排序
public void heapSort(int[] arr){
    // as 
    if(arr == null || arr.length <= 1){
        return;
    }
    // 初始化
    int len = arr.length - 1;
    // 构造最大堆
    // 遍历每个父节点进行判断
    int lastIndex = (len - 1) / 2;
    // 从下到上，依次构造最大堆
    for(int i = lastIndex; i >= 0; i--){
        maxHeapify(arr, i, len);
    }

    // 排序主体
    // 将当前的最小点和最后一个节点进行交换
    while()
    // 需要交换n次
    for(int i = 0; i < len; i++){
        swap(0, len - i);
        maxHeapify(arr, 0, len - i -1); // 从哪到哪
    }
}


## 复习
> 数据库常用面试题(已看)

> jvm内存模型和GC模型(已看)

> Spark和Hadoop

> 计算机网络(常用问题)

> 常用大规模算法(已看)