# 代码练习
# 单链表反转
## 单链表声明
    public class ListNode{
        public int val;
        public ListNode next;
        public ListNode(int val){
            this.val = val;
            this.next = null;
        }
    }
## 遍历法(前插法)
    public ListNode reverse(ListNode head){
        ListNode prev = null;
        // 之所以采用head!=null的方式进行遍历
        while(head != null){
            // 不要使用ListNode cur = head; 这样会使得head发生变化，先将next保存下来为王道
            ListNode next = head.next;
            head.next = prev; // 前插法
            prev = head; // 更新头节点
            head = next; // 更新遍历节点
        }
        return prev;
    }

## 递归法
// 异常条件，增加稳健性
    public ListNode reverse(ListNode head){
        // 第一个为异常条件， 第二个为递归终止条件
        if(head == null || head.next == null){
            return head;
        }
        // 遍历链表，达到最后一个节点
        ListNode next = head.next;
        ListNode newHead = reverse(next);
        // 将head插到next之后
        next.next = head;
        head.next = null;
        return newHead;
    }

# 双链表反转
## 双链表声明
    public class DListNode{
        public int val;
        public DListNode prev;
        public DListNode next;
        public DListNode(int val){
            this.val = val;
            this.prev = this.next = null; // 可以连赋值
        }
    }
## 反转
    public DlistNode reverse(DlistNode head){
        // 申明
        DlistNode cur = null;
        while(head != null){
            cur = head;   // 为了获得最后一个节点，将该节点保存下来, 这是遍历法的经典做法
            DlistNode next = cur.next;
            cur.next = cur.prev;
            cur.prev = next;
            head = next;
        }
        return cur;
    }


    // 单链表逆转
    public ListNode  reverse(ListNode head){
        // 异常条件和终止条件(达到最后一个节点)
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;
        ListNode newHead = reverse(next);
        // 将head插到next的后面(尾插法)
        next.next = head;
        head.next = null;
        return newHead;
    }
// 二叉树的广度优先遍历
> 利用队列的方式
public void levelIter(TreeNode root){
    if(root == null){
        return;
    }
    Queue<TreeNode> queue = new LinkedList<ListNode>;
    queue.add(root) // 队列增加节点
    // 如果队列不空
    while(!queue.isEmpty()){
        TreeNode node = queue.poll(); // 弹出第一个节点
        System.out.println(node.val);
        if(node.left!=null){
            queue.add(node.left); // 将
        }
        if(node.right!=null){
            queue.add(node.right);
        }    
    }
}

// 链表删除操作
// 删除有两种删除法，一种是给一个Node,利用换位的思想直接删除，另一种是根据遍历获取值的方式
// 没有头指针的写法需要分情况讨论
// 有头指针时，只需要让prev = head; c = head.next; 便可以完美解决问题
// 返回头结点
    pubic ListNode remove(ListNode head, int val){
        if(head == null){
            return false;
        }
        ListNode prev = head;
        ListNode c = prev; // 将上个节点保留
        while(c!=null){
            ListNode next = c.next; // 获取下一个值
            // 关键在于判断是不是第一个
            if(c.val == val){
                // 说明是头结点
                if(prev == c){
                    // 让后面那个节点顶上来,头结点没有prev
                    c = next;
                }
                // 不是头结点
                else{
                    prev.next = next;
                }
                return true;
            }
            prev = c; 
            c = next; 
        }
        return next;  
    }


import java.util.HashMap;
public class Solution {
    // 创建HashMap作为查询索引
    HashMap<Integer, Integer> inIndex;
    // 利用递归的思想进行重建
    // 熟悉先序遍历的结构和中序遍历的结构，中序遍历左半边和右半边分别为root的左子树和右子树
    public TreeNode reConstructBinaryTree(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd){
        // 异常情况,为叶子节点准备
        if(preStart > preEnd || inStart > inEnd){
            return null;
        }
        // 申明类当然是用new
        TreeNode root = new TreeNode(pre[preStart]); // 第一个节点即为root
        for(int i = ; i < in.length; i++){
            if(in[i] == pre[preStart]){
               	int rootIndex = i;
     			root.left = reConstructBinaryTree(pre, preStart+1, preStart + rootIndex - inStart,in, inStart, rootIndex - 1);
        		root.right = reConstructBinaryTree(pre, preStart + rootIndex - inStart +1, preEnd, in, rootIndex + 1, inEnd);
                break;
            }
        }
        // int rootIndex = inIndex.get(pre[preStart]);
        // 假设左子树，右子树均已经创建完毕
        // 注意引入哪部分数据这是根据左子树,右子树的长度来计算
        return root;
    }
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        int preLen = pre.length;
        int inLen = in.length;
        // 异常情况
        if(preLen < 1 || inLen < 1){
            return null;
        }
        // 构建HashMap
        for(int i = 0; i < inLen; i++){
            inIndex.put(in[i], i);
        }
        // 将树进行递归
        return reConstructBinaryTree(pre, 0, preLen - 1, in, 0, inLen - 1);  
    }
}

// 利用队列来实现栈的功能，也类似的想法，将出队到另一个队列


    // 非递归写法
    public ListNode Merge(ListNode list1,ListNode list2) {
        // 异常情况
        if(list1 == null){
            return list2;
        }
        if(list2 == null){
            return list1;
        }
		// 先定义头结点
        ListNode newHead;
        ListNode p1 = list1;
        ListNode p2 = list2;
        // list2作为头
        if(p1.val > p2.val){
            newHead = p2;
            p2 = p2.next;
        }
        else{
            newHead = p1;
            p1 = p1.next; 
        }
        ListNode tmpHead = newHead; // 拿来遍历所用
        while(p1!=null&&p2!=null){
            if(p1.val > p2.val){
                tmpHead.next = p2;
                p2 = p2.next;
            }
            else{
                tmpHead.next = p1;
                p1 = p1.next;
            }
            tmpHead = tmpHead.next; // 遍历到最后一个点
        }
        
        // 如果有p1或者p2没有结束
        if(p1!=null){
            tmpHead.next = p1;
        }
        if(p2!=null){
            tmpHead.next = p2;
        }
        return newHead;
    }


    public class Solution {
    // 判断是否是子树
    // 已知量：A,B两棵子树
    // 未知量：两者之间的关系
    // 子结构，应该是说数值上会有一个子关系
    // 如果左子树和右子树
    // 假如左子树和右子树中已经能够判断
    // root1和root2如果相等的话，判断root1子树和root2子树的关系
    // root1和root2如果不相等，判断root1的子树的结构和root2的结构
    // 考虑问题：如果有节点相等怎么办？
    // 如果这个问题：则需要遍历root1的节点
    // 这个写法虽然比较简洁，但是时间复杂度却上升了
    public boolean HasSubtreeFromRoot(TreeNode root1,TreeNode root2) {
        // root2如果为null，必然是正确的,root1不管是有值还是没值，都是正确的
        if(root2==null){
            return true;
        }
        // 如果root2有值，root1没有值，那么必然不正确
        else if(root1==null){
            return false;
		}
        // 然后是两者都有值
        // 先比较根节点，再比较子树
        // 如果相等再看有没有子树，都有子树就进行比较，否则无需比较, 这句话可以写到终止条件里
        if(root1.val == root2.val){
            return  HasSubtreeFromRoot(root1.left, root2.left) && HasSubtreeFromRoot(root1.right, root2.right);
        }
        else{
            return false;
        }
    }
    
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        // 通过递归遍历root1的节点
        // 异常情况,当root1为空时或者root2为空时，均不是子树
        if(root1 == null || root2 == null){
            return false;
        }
        return HasSubtreeFromRoot(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);
    }
}



    public boolean IsPopOrder(int [] pushA,int [] popA) {
      	// 异常情况
        if(pushA.length < 1){
            return false;
        }
        // 构造索引
        HashMap<Integer, Integer> pushIndex = new HashMap<Integer, Integer>();
        for(int i = 0; i < pushA.length; i++){
            pushIndex.put(pushA[i], i);
        }
       	// 遍历弹栈数组
        // 取前面的最大索引
        int prevPushMaxIndex = -1;
        for(int i = 0; i < popA.length; i++){
            // 异常判断,如果前后不一致
            if(!pushIndex.containsKey(popA[i])){
                return false;
            }
             // 出现后进后出的点，判断该点是否合理
            if(i > 1 && pushIndex.get(popA[i]) - pushIndex.get(popA[i-1]) > 0){
                // 判断之前出现的，有没有比该点更晚入栈，如果有则为false
                if(prevPushMaxIndex > pushIndex.get(popA[i])){
                    return false;
                } 
            }
            // 获取的最大索引
            if(pushIndex.get(popA[i]) > prevPushMaxIndex){
                prevPushMaxIndex = pushIndex.get(popA[i]);
            }
        }
        return true;
    }


    import java.util.ArrayList;

public class Solution {
    // known variable: root of BST
    // unknown: head of DoubleLinkedList
    // InOrderTraverse of BST can be order increasing
    // we could create linkedList then add left and right
    
    ArrayList<TreeNode> nodeList = new ArrayList<>();
    public void InOrderTraverse(TreeNode root){
       if(root==null){
            return;
        }
        InOrderTraverse(root.left);
        nodeList.add(root);
        InOrderTraverse(root.right);
    }
    public TreeNode Convert(TreeNode pRootOfTree) {
        // end condition
        if(pRootOfTree==null){
            return null;
        }
		InOrderTraverse(pRootOfTree);
        // traverse end
        int len = nodeList.size();
        for(int i = 0; i < len; i++){
            TreeNode node = nodeList.get(i);
            if(i-1>=0){
                node.left = nodeList.get(i-1);
            }
            else{
                node.left = null;
            }
            if(i+1<len){
                node.right = nodeList.get(i+1);
            }
            else{
                node.right = null;
            }  
        }
        return nodeList.get(0);
    }
}


    public int InversePairs(int [] array) {
       int len = array.length;
       if(len < 1){
           return 0;
       }
       int count = 0;
       for(int i = 0; i < len - 1; i++){
           for(int j = i; j < len-1; j++){
               if(array[j] > array[j+1] ){
                   count++;
               }
           }
       }
      return count % 1000000007;
    }


    public class Solution {
    // init thought is traverse compare each other N(N-1)/2
    // the time is too much
    // can we reduce it to O(N*log(N)) use partition and then merge
    // merge Sort can be used
    
    // aux function
    // use thought like merge sort
    public int merge(int[] array, int left, int mid, int right){
        // abnormal situation
        if(left>=right){
            return 0;
        }
        // first part index is between left and mid
        // second part index is between mid+1 and right
        int[] tmp = new int[right-left+1]; // init tmp array
        int current = right - left;
        int i = mid; // the end  of left part
        int j = right; // the end of right part
        int pairNum = 0;
        // compare from the end
        while(i>=left && j>=mid+1){
            if(array[i] > array[j]){
                tmp[current--] = array[i--]; 
                pairNum += j - mid; // get the length          
            }else{
                tmp[current--] = array[j--]; 
            }
        }
        while(i>=left){
            tmp[current--] = array[i--]; 
        }
        while(j>=mid+1){
            tmp[current--] = array[j--]; 
        }

        // update the original array
        for(int k = 0; k < right-left+1; k++){
            array[k+left] = tmp[k];
        }
        return pairNum; // 
    }
    // aux function
    // left is the start index
    // right is the end index
    public int InversePairs(int[] array, int left, int right){
        // base condition
        if(left>=right){
            return 0;
        }
        int mid = (left + right) / 2; // floor int`
        // mergeSort can get the pairNumber between two part
        return merge(array, left, mid, right) + InversePairs(array, left, mid) + InversePairs(array, mid+1, right);
    }
    
    public int InversePairs(int [] array) {
       int len = array.length;
       if(len < 1){
           return 0;
       }
      return InversePairs(array, 0, len-1) % 1000000007;
    }
}

// 
各位上会出现几个1
/10 之后出现，当前位数
/100 %100

> 快排
> 快排在于入坑分治
public void qSort(int[] arr){

}


> 